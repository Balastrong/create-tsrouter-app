{
  "name": "ecommerce-starter",
  "version": "0.0.1",
  "description": "eCommerce Starter",
  "author": "Jane Smith <jane.smith@example.com>",
  "license": "MIT",
  "link": "https://github.com/jane-smith/ecommerce-starter-starter",
  "command": {},
  "shadcnComponents": [],
  "framework": "react",
  "templates": [
    "file-router"
  ],
  "routes": [],
  "warning": "",
  "variables": {},
  "phase": "add-on",
  "type": "starter",
  "packageAdditions": {
    "scripts": {},
    "dependencies": {},
    "devDependencies": {}
  },
  "files": {
    "./src/components/Header.tsx": "import { Link } from \"@tanstack/react-router\";\n\nimport TanchatHeader from \"@/integrations/tanchat/header-user\";\n\nexport default function Header() {\n  return (\n    <header className=\"p-4 flex gap-2 bg-black/30 text-white border-b border-orange-500/20 backdrop-blur-md sticky top-0 z-50\">\n      <nav className=\"flex flex-row items-center\">\n        <div className=\"px-4 font-extrabold text-lg\">\n          <Link to=\"/\" className=\"hover:text-orange-400 transition-colors\">\n            ðŸŽ¸ Guitar Shop\n          </Link>\n        </div>\n\n        <div className=\"px-4 font-bold\">\n          <Link to=\"/chat\" className=\"hover:text-orange-400 transition-colors\">\n            Chat\n          </Link>\n        </div>\n      </nav>\n\n      <div className=\"ml-auto\">\n        <TanchatHeader />\n      </div>\n    </header>\n  );\n}\n",
    "./src/components/example-AIAssistant.tsx": "import { useEffect, useRef } from \"react\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { Send, X } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport rehypeRaw from \"rehype-raw\";\nimport rehypeSanitize from \"rehype-sanitize\";\nimport rehypeHighlight from \"rehype-highlight\";\nimport remarkGfm from \"remark-gfm\";\nimport { useChat } from \"@ai-sdk/react\";\nimport { genAIResponse } from \"../utils/demo.ai\";\n\nimport { showAIAssistant } from \"../store/example-assistant\";\nimport GuitarRecommendation from \"./example-GuitarRecommendation\";\n\nimport type { UIMessage } from \"ai\";\n\nfunction Messages({ messages }: { messages: Array<UIMessage> }) {\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTop =\n        messagesContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  if (!messages.length) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center text-gray-400 text-sm\">\n        Ask me about your next guitar.\n      </div>\n    );\n  }\n\n  return (\n    <div ref={messagesContainerRef} className=\"flex-1 overflow-y-auto\">\n      {messages.map(({ id, role, content, parts }) => (\n        <div\n          key={id}\n          className={`py-3 ${\n            role === \"assistant\"\n              ? \"bg-gradient-to-r from-orange-500/5 to-red-600/5\"\n              : \"bg-transparent\"\n          }`}\n        >\n          {content.length > 0 && (\n            <div className=\"flex items-start gap-2 px-4\">\n              {role === \"assistant\" ? (\n                <div className=\"w-6 h-6 rounded-lg bg-gradient-to-r from-orange-500 to-red-600 flex items-center justify-center text-xs font-medium text-white flex-shrink-0\">\n                  AI\n                </div>\n              ) : (\n                <div className=\"w-6 h-6 rounded-lg bg-gray-700 flex items-center justify-center text-xs font-medium text-white flex-shrink-0\">\n                  Y\n                </div>\n              )}\n              <div className=\"flex-1 min-w-0\">\n                <ReactMarkdown\n                  className=\"prose dark:prose-invert max-w-none prose-sm\"\n                  rehypePlugins={[\n                    rehypeRaw,\n                    rehypeSanitize,\n                    rehypeHighlight,\n                    remarkGfm,\n                  ]}\n                >\n                  {content}\n                </ReactMarkdown>\n              </div>\n            </div>\n          )}\n          {parts\n            .filter((part) => part.type === \"tool-invocation\")\n            .filter(\n              (part) => part.toolInvocation.toolName === \"recommendGuitar\"\n            )\n            .map((toolCall) => (\n              <div\n                key={toolCall.toolInvocation.toolName}\n                className=\"max-w-[80%] mx-auto\"\n              >\n                <GuitarRecommendation id={toolCall.toolInvocation.args.id} />\n              </div>\n            ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default function AIAssistant() {\n  const isOpen = useStore(showAIAssistant);\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\n    initialMessages: [],\n    fetch: (_url, options) => {\n      const { messages } = JSON.parse(options!.body! as string);\n      return genAIResponse({\n        data: {\n          messages,\n        },\n      });\n    },\n    onToolCall: (call) => {\n      if (call.toolCall.toolName === \"recommendGuitar\") {\n        return \"Handled by the UI\";\n      }\n    },\n  });\n\n  return (\n    <div className=\"relative z-50\">\n      <button\n        onClick={() => showAIAssistant.setState((state) => !state)}\n        className=\"flex items-center gap-2 px-4 py-2 rounded-lg bg-black/90 text-white hover:bg-black/80 transition-all border border-orange-500/20 shadow-lg shadow-orange-500/10\"\n      >\n        <div className=\"w-5 h-5 rounded-lg bg-gradient-to-r from-orange-500 to-red-600 flex items-center justify-center text-xs font-medium\">\n          ðŸŽ¸\n        </div>\n        Guitar Expert\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute top-full right-0 mt-2 w-[700px] h-[600px] bg-black/95 rounded-lg shadow-2xl border border-orange-500/20 flex flex-col backdrop-blur-sm\">\n          <div className=\"flex items-center justify-between p-4 border-b border-orange-500/20 bg-gradient-to-r from-orange-500/5 to-red-600/5\">\n            <h3 className=\"font-semibold text-white flex items-center gap-2\">\n              <span className=\"w-6 h-6 rounded-lg bg-gradient-to-r from-orange-500 to-red-600 flex items-center justify-center text-xs\">\n                ðŸŽ¸\n              </span>\n              Guitar Expert\n            </h3>\n            <button\n              onClick={() => showAIAssistant.setState((state) => !state)}\n              className=\"text-gray-400 hover:text-white transition-colors\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          <Messages messages={messages} />\n\n          <div className=\"p-4 border-t border-orange-500/20 bg-gradient-to-r from-orange-500/5 to-red-600/5\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"relative\">\n                <textarea\n                  value={input}\n                  onChange={handleInputChange}\n                  placeholder=\"Ask about our featured guitars...\"\n                  className=\"w-full rounded-lg border border-orange-500/20 bg-black/50 pl-3 pr-10 py-3 text-sm text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500/30 focus:border-transparent resize-none overflow-hidden shadow-inner\"\n                  rows={1}\n                  style={{ minHeight: \"44px\", maxHeight: \"120px\" }}\n                  onInput={(e) => {\n                    const target = e.target as HTMLTextAreaElement;\n                    target.style.height = \"auto\";\n                    target.style.height =\n                      Math.min(target.scrollHeight, 120) + \"px\";\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && !e.shiftKey) {\n                      e.preventDefault();\n                      handleSubmit(e);\n                    }\n                  }}\n                />\n                <button\n                  type=\"submit\"\n                  disabled={!input.trim()}\n                  className=\"absolute right-2 top-1/2 -translate-y-1/2 p-2 text-orange-500 hover:text-orange-400 disabled:text-gray-500 transition-colors focus:outline-none\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
    "./src/routeTree.gen.ts": "/* eslint-disable */\n\n// @ts-nocheck\n\n// noinspection JSUnusedGlobalSymbols\n\n// This file was automatically generated by TanStack Router.\n// You should NOT make any changes in this file as it will be overwritten.\n// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.\n\n// Import Routes\n\nimport { Route as rootRoute } from './routes/__root'\nimport { Route as ChatImport } from './routes/chat'\nimport { Route as IndexImport } from './routes/index'\nimport { Route as GuitarsGuitarIdImport } from './routes/guitars/$guitarId'\n\n// Create/Update Routes\n\nconst ChatRoute = ChatImport.update({\n  id: '/chat',\n  path: '/chat',\n  getParentRoute: () => rootRoute,\n} as any)\n\nconst IndexRoute = IndexImport.update({\n  id: '/',\n  path: '/',\n  getParentRoute: () => rootRoute,\n} as any)\n\nconst GuitarsGuitarIdRoute = GuitarsGuitarIdImport.update({\n  id: '/guitars/$guitarId',\n  path: '/guitars/$guitarId',\n  getParentRoute: () => rootRoute,\n} as any)\n\n// Populate the FileRoutesByPath interface\n\ndeclare module '@tanstack/react-router' {\n  interface FileRoutesByPath {\n    '/': {\n      id: '/'\n      path: '/'\n      fullPath: '/'\n      preLoaderRoute: typeof IndexImport\n      parentRoute: typeof rootRoute\n    }\n    '/chat': {\n      id: '/chat'\n      path: '/chat'\n      fullPath: '/chat'\n      preLoaderRoute: typeof ChatImport\n      parentRoute: typeof rootRoute\n    }\n    '/guitars/$guitarId': {\n      id: '/guitars/$guitarId'\n      path: '/guitars/$guitarId'\n      fullPath: '/guitars/$guitarId'\n      preLoaderRoute: typeof GuitarsGuitarIdImport\n      parentRoute: typeof rootRoute\n    }\n  }\n}\n\n// Create and export the route tree\n\nexport interface FileRoutesByFullPath {\n  '/': typeof IndexRoute\n  '/chat': typeof ChatRoute\n  '/guitars/$guitarId': typeof GuitarsGuitarIdRoute\n}\n\nexport interface FileRoutesByTo {\n  '/': typeof IndexRoute\n  '/chat': typeof ChatRoute\n  '/guitars/$guitarId': typeof GuitarsGuitarIdRoute\n}\n\nexport interface FileRoutesById {\n  __root__: typeof rootRoute\n  '/': typeof IndexRoute\n  '/chat': typeof ChatRoute\n  '/guitars/$guitarId': typeof GuitarsGuitarIdRoute\n}\n\nexport interface FileRouteTypes {\n  fileRoutesByFullPath: FileRoutesByFullPath\n  fullPaths: '/' | '/chat' | '/guitars/$guitarId'\n  fileRoutesByTo: FileRoutesByTo\n  to: '/' | '/chat' | '/guitars/$guitarId'\n  id: '__root__' | '/' | '/chat' | '/guitars/$guitarId'\n  fileRoutesById: FileRoutesById\n}\n\nexport interface RootRouteChildren {\n  IndexRoute: typeof IndexRoute\n  ChatRoute: typeof ChatRoute\n  GuitarsGuitarIdRoute: typeof GuitarsGuitarIdRoute\n}\n\nconst rootRouteChildren: RootRouteChildren = {\n  IndexRoute: IndexRoute,\n  ChatRoute: ChatRoute,\n  GuitarsGuitarIdRoute: GuitarsGuitarIdRoute,\n}\n\nexport const routeTree = rootRoute\n  ._addFileChildren(rootRouteChildren)\n  ._addFileTypes<FileRouteTypes>()\n\n/* ROUTE_MANIFEST_START\n{\n  \"routes\": {\n    \"__root__\": {\n      \"filePath\": \"__root.tsx\",\n      \"children\": [\n        \"/\",\n        \"/chat\",\n        \"/guitars/$guitarId\"\n      ]\n    },\n    \"/\": {\n      \"filePath\": \"index.tsx\"\n    },\n    \"/chat\": {\n      \"filePath\": \"chat.tsx\"\n    },\n    \"/guitars/$guitarId\": {\n      \"filePath\": \"guitars/$guitarId.tsx\"\n    }\n  }\n}\nROUTE_MANIFEST_END */\n",
    "./src/routes/__root.tsx": "import {\n  Outlet,\n  HeadContent,\n  Scripts,\n  createRootRoute,\n} from \"@tanstack/react-router\";\nimport { TanStackRouterDevtools } from \"@tanstack/react-router-devtools\";\n\nimport Header from \"../components/Header\";\n\nimport appCss from \"../styles.css?url\";\n\nexport const Route = createRootRoute({\n  head: () => ({\n    meta: [\n      {\n        charSet: \"utf-8\",\n      },\n      {\n        name: \"viewport\",\n        content: \"width=device-width, initial-scale=1\",\n      },\n      {\n        title: \"TanStack Start Starter\",\n      },\n    ],\n    links: [\n      {\n        rel: \"stylesheet\",\n        href: appCss,\n      },\n    ],\n  }),\n\n  component: () => (\n    <RootDocument>\n      <Header />\n\n      <Outlet />\n      <TanStackRouterDevtools />\n    </RootDocument>\n  ),\n});\n\nfunction RootDocument({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <HeadContent />\n      </head>\n      <body className=\"bg-black\">\n        {children}\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n",
    "./src/routes/chat.tsx": "import { createFileRoute } from \"@tanstack/react-router\";\nimport { useEffect, useRef } from \"react\";\nimport { Send } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport rehypeRaw from \"rehype-raw\";\nimport rehypeSanitize from \"rehype-sanitize\";\nimport rehypeHighlight from \"rehype-highlight\";\nimport remarkGfm from \"remark-gfm\";\nimport { useChat } from \"@ai-sdk/react\";\n\nimport { genAIResponse } from \"../utils/demo.ai\";\n\nimport type { UIMessage } from \"ai\";\n\nimport \"../demo.index.css\";\n\nfunction InitalLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"flex-1 flex items-center justify-center px-4 bg-black/90\">\n      <div className=\"text-center max-w-3xl mx-auto w-full\">\n        <h1 className=\"text-6xl font-bold mb-4 bg-gradient-to-r from-orange-500 to-red-600 text-transparent bg-clip-text uppercase\">\n          Guitar Expert Chat\n        </h1>\n        <p className=\"text-gray-400 mb-8 w-2/3 mx-auto text-lg\">\n          Get personalized advice about our featured guitars and find your\n          perfect match\n        </p>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nfunction ChattingLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"absolute bottom-0 right-0 left-0 bg-black/95 backdrop-blur-lg border-t border-orange-500/20\">\n      <div className=\"max-w-3xl mx-auto w-full px-4 py-4\">{children}</div>\n    </div>\n  );\n}\n\nfunction Messages({ messages }: { messages: Array<UIMessage> }) {\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTop =\n        messagesContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  if (!messages.length) {\n    return null;\n  }\n\n  return (\n    <div ref={messagesContainerRef} className=\"flex-1 overflow-y-auto pb-24\">\n      <div className=\"max-w-3xl mx-auto w-full px-4\">\n        {messages.map(({ id, role, content }) => (\n          <div\n            key={id}\n            className={`py-6 px-4 rounded-lg mb-4 ${\n              role === \"assistant\"\n                ? \"bg-gradient-to-r from-gray-900 to-gray-800 border border-orange-500/10\"\n                : \"bg-gray-900/50\"\n            }`}\n          >\n            <div className=\"flex items-start gap-4 max-w-3xl mx-auto w-full\">\n              {role === \"assistant\" ? (\n                <div className=\"w-10 h-10 rounded-lg bg-gradient-to-r from-orange-500 to-red-600 mt-1 flex items-center justify-center text-sm font-medium text-white flex-shrink-0 shadow-lg\">\n                  ðŸŽ¸\n                </div>\n              ) : (\n                <div className=\"w-10 h-10 rounded-lg bg-gray-800 border border-orange-500/20 flex items-center justify-center text-sm font-medium text-white flex-shrink-0\">\n                  You\n                </div>\n              )}\n              <div className=\"flex-1 min-w-0\">\n                <ReactMarkdown\n                  className=\"prose dark:prose-invert max-w-none\"\n                  rehypePlugins={[\n                    rehypeRaw,\n                    rehypeSanitize,\n                    rehypeHighlight,\n                    remarkGfm,\n                  ]}\n                >\n                  {content}\n                </ReactMarkdown>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction ChatPage() {\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\n    initialMessages: [],\n    fetch: (_url, options) => {\n      const { messages } = JSON.parse(options!.body! as string);\n      return genAIResponse({\n        data: {\n          messages,\n        },\n      });\n    },\n  });\n\n  const Layout = messages.length ? ChattingLayout : InitalLayout;\n\n  return (\n    <div className=\"relative flex h-[calc(100vh-32px)] bg-black\">\n      <div className=\"flex-1 flex flex-col\">\n        <Messages messages={messages} />\n\n        <Layout>\n          <form onSubmit={handleSubmit}>\n            <div className=\"relative max-w-xl mx-auto\">\n              <textarea\n                value={input}\n                onChange={handleInputChange}\n                placeholder=\"Ask about our featured guitars...\"\n                className=\"w-full rounded-lg border border-orange-500/20 bg-gray-900/90 pl-4 pr-12 py-3 text-sm text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500/30 focus:border-transparent resize-none overflow-hidden shadow-xl\"\n                rows={1}\n                style={{ minHeight: \"44px\", maxHeight: \"200px\" }}\n                onInput={(e) => {\n                  const target = e.target as HTMLTextAreaElement;\n                  target.style.height = \"auto\";\n                  target.style.height =\n                    Math.min(target.scrollHeight, 200) + \"px\";\n                }}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\" && !e.shiftKey) {\n                    e.preventDefault();\n                    handleSubmit(e);\n                  }\n                }}\n              />\n              <button\n                type=\"submit\"\n                disabled={!input.trim()}\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 p-2 text-orange-500 hover:text-orange-400 disabled:text-gray-500 transition-colors focus:outline-none\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </form>\n        </Layout>\n      </div>\n    </div>\n  );\n}\n\nexport const Route = createFileRoute(\"/chat\")({\n  component: ChatPage,\n});\n",
    "./src/routes/guitars/$guitarId.tsx": "import { Link, createFileRoute } from \"@tanstack/react-router\";\nimport guitars from \"../../data/example-guitars\";\n\nexport const Route = createFileRoute(\"/guitars/$guitarId\")({\n  component: RouteComponent,\n  loader: async ({ params }) => {\n    const guitar = guitars.find((guitar) => guitar.id === +params.guitarId);\n    if (!guitar) {\n      throw new Error(\"Guitar not found\");\n    }\n    return guitar;\n  },\n});\n\nfunction RouteComponent() {\n  const guitar = Route.useLoaderData();\n\n  return (\n    <div className=\"relative min-h-[100vh] flex items-center bg-black text-white p-5\">\n      <div className=\"relative z-10 w-[60%] bg-gray-900/60 backdrop-blur-md rounded-2xl p-8 border border-gray-800/50 shadow-xl\">\n        <Link\n          to=\"/\"\n          className=\"inline-block mb-4 text-emerald-400 hover:text-emerald-300\"\n        >\n          &larr; Back to all guitars\n        </Link>\n        <h1 className=\"text-3xl font-bold mb-4\">{guitar.name}</h1>\n        <p className=\"text-gray-300 mb-6\">{guitar.description}</p>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-2xl font-bold text-emerald-400\">\n            ${guitar.price}\n          </div>\n          <button className=\"bg-emerald-600 hover:bg-emerald-500 text-white px-6 py-2 rounded-lg transition-colors\">\n            Add to Cart\n          </button>\n        </div>\n      </div>\n\n      <div className=\"absolute top-0 right-0 w-[55%] h-full z-0\">\n        <div className=\"w-full h-full overflow-hidden rounded-2xl border-4 border-gray-800 shadow-2xl\">\n          <img\n            src={guitar.image}\n            alt={guitar.name}\n            className=\"w-full h-full object-cover guitar-image\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "./src/routes/index.tsx": "import { Link, createFileRoute } from \"@tanstack/react-router\";\nimport guitars from \"@/data/example-guitars\";\n\nexport const Route = createFileRoute(\"/\")({\n  component: GuitarsIndex,\n});\n\nfunction GuitarsIndex() {\n  return (\n    <div className=\"bg-black text-white p-5\">\n      <h1 className=\"text-3xl font-bold mb-8 text-center\">Featured Guitars</h1>\n      <div className=\"flex flex-wrap gap-12 justify-center\">\n        {guitars.map((guitar) => (\n          <div\n            key={guitar.id}\n            className=\"w-full md:w-[calc(50%-1.5rem)] xl:w-[calc(33.333%-2rem)] relative mb-24\"\n          >\n            <Link\n              to=\"/guitars/$guitarId\"\n              params={{\n                guitarId: guitar.id.toString(),\n              }}\n            >\n              <div className=\"relative z-0 w-full aspect-square mb-8\">\n                <div className=\"w-full h-full overflow-hidden rounded-2xl border-4 border-gray-800 shadow-2xl\">\n                  <img\n                    src={guitar.image}\n                    alt={guitar.name}\n                    className=\"w-full h-full object-cover guitar-image group-hover:scale-105 transition-transform duration-500\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                </div>\n\n                <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-emerald-500/80 text-white px-4 py-2 rounded-full text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300 backdrop-blur-sm\">\n                  View Details\n                </div>\n              </div>\n\n              <div className=\"absolute bottom-0 right-0 z-10 w-[80%] bg-gray-900/60 backdrop-blur-md rounded-2xl p-5 border border-gray-800/50 shadow-xl transform translate-y-[40%]\">\n                <h2 className=\"text-xl font-bold mb-2\">{guitar.name}</h2>\n                <p className=\"text-gray-300 mb-3 line-clamp-2\">\n                  {guitar.shortDescription}\n                </p>\n                <div className=\"text-xl font-bold text-emerald-400\">\n                  ${guitar.price}\n                </div>\n              </div>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
    "./src/utils/demo.tools.ts": "import { tool } from \"ai\";\nimport { z } from \"zod\";\nimport guitars from \"../data/example-guitars\";\n\nconst getGuitars = tool({\n  description: \"Get all products from the database\",\n  parameters: z.object({}),\n  execute: async () => {\n    return Promise.resolve(guitars);\n  },\n});\n\nconst recommendGuitar = tool({\n  description: \"Use this tool to recommend a guitar to the user\",\n  parameters: z.object({\n    id: z.string().describe(\"The id of the guitar to recommend\"),\n  }),\n});\n\nexport default async function getTools() {\n  return {\n    getGuitars,\n    recommendGuitar,\n  };\n}\n",
    "./starter-info.json": "{\n  \"name\": \"ecommerce-starter\",\n  \"version\": \"0.0.1\",\n  \"description\": \"eCommerce Starter\",\n  \"author\": \"Jane Smith <jane.smith@example.com>\",\n  \"license\": \"MIT\",\n  \"link\": \"https://github.com/jane-smith/ecommerce-starter-starter\",\n  \"command\": {},\n  \"shadcnComponents\": [],\n  \"framework\": \"react\",\n  \"templates\": [\"file-router\"],\n  \"routes\": [],\n  \"warning\": \"\",\n  \"variables\": {},\n  \"phase\": \"add-on\",\n  \"type\": \"starter\",\n  \"packageAdditions\": {\n    \"scripts\": {},\n    \"dependencies\": {},\n    \"devDependencies\": {}\n  }\n}\n",
    "./starter.json": "{\n  \"name\": \"ecommerce-starter-starter\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Project starter\",\n  \"author\": \"Jane Smith <jane.smith@example.com>\",\n  \"license\": \"MIT\",\n  \"link\": \"https://github.com/jane-smith/ecommerce-starter-starter\",\n  \"command\": {},\n  \"shadcnComponents\": [],\n  \"framework\": \"react\",\n  \"templates\": [\n    \"file-router\"\n  ],\n  \"routes\": [],\n  \"warning\": \"\",\n  \"variables\": {},\n  \"phase\": \"add-on\",\n  \"type\": \"starter\",\n  \"packageAdditions\": {\n    \"scripts\": {},\n    \"dependencies\": {},\n    \"devDependencies\": {}\n  },\n  \"files\": {\n    \"./src/components/Header.tsx\": \"import { Link } from \\\"@tanstack/react-router\\\";\\n\\nimport TanchatHeader from \\\"@/integrations/tanchat/header-user\\\";\\n\\nexport default function Header() {\\n  return (\\n    <header className=\\\"p-4 flex gap-2 bg-black/30 text-white border-b border-orange-500/20 backdrop-blur-md sticky top-0 z-50\\\">\\n      <nav className=\\\"flex flex-row items-center\\\">\\n        <div className=\\\"px-4 font-extrabold text-lg\\\">\\n          <Link to=\\\"/\\\" className=\\\"hover:text-orange-400 transition-colors\\\">\\n            ðŸŽ¸ Guitar Shop\\n          </Link>\\n        </div>\\n\\n        <div className=\\\"px-4 font-bold\\\">\\n          <Link to=\\\"/chat\\\" className=\\\"hover:text-orange-400 transition-colors\\\">\\n            Chat\\n          </Link>\\n        </div>\\n      </nav>\\n\\n      <div className=\\\"ml-auto\\\">\\n        <TanchatHeader />\\n      </div>\\n    </header>\\n  );\\n}\\n\",\n    \"./src/components/example-AIAssistant.tsx\": \"import { useEffect, useRef } from \\\"react\\\";\\nimport { useStore } from \\\"@tanstack/react-store\\\";\\nimport { Send, X } from \\\"lucide-react\\\";\\nimport ReactMarkdown from \\\"react-markdown\\\";\\nimport rehypeRaw from \\\"rehype-raw\\\";\\nimport rehypeSanitize from \\\"rehype-sanitize\\\";\\nimport rehypeHighlight from \\\"rehype-highlight\\\";\\nimport remarkGfm from \\\"remark-gfm\\\";\\nimport { useChat } from \\\"@ai-sdk/react\\\";\\nimport { genAIResponse } from \\\"../utils/demo.ai\\\";\\n\\nimport { showAIAssistant } from \\\"../store/example-assistant\\\";\\nimport GuitarRecommendation from \\\"./example-GuitarRecommendation\\\";\\n\\nimport type { UIMessage } from \\\"ai\\\";\\n\\nfunction Messages({ messages }: { messages: Array<UIMessage> }) {\\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\\n\\n  useEffect(() => {\\n    if (messagesContainerRef.current) {\\n      messagesContainerRef.current.scrollTop =\\n        messagesContainerRef.current.scrollHeight;\\n    }\\n  }, [messages]);\\n\\n  if (!messages.length) {\\n    return (\\n      <div className=\\\"flex-1 flex items-center justify-center text-gray-400 text-sm\\\">\\n        Ask me about your next guitar.\\n      </div>\\n    );\\n  }\\n\\n  return (\\n    <div ref={messagesContainerRef} className=\\\"flex-1 overflow-y-auto\\\">\\n      {messages.map(({ id, role, content, parts }) => (\\n        <div\\n          key={id}\\n          className={`py-3 ${\\n            role === \\\"assistant\\\"\\n              ? \\\"bg-gradient-to-r from-orange-500/5 to-red-600/5\\\"\\n              : \\\"bg-transparent\\\"\\n          }`}\\n        >\\n          {content.length > 0 && (\\n            <div className=\\\"flex items-start gap-2 px-4\\\">\\n              {role === \\\"assistant\\\" ? (\\n                <div className=\\\"w-6 h-6 rounded-lg bg-gradient-to-r from-orange-500 to-red-600 flex items-center justify-center text-xs font-medium text-white flex-shrink-0\\\">\\n                  AI\\n                </div>\\n              ) : (\\n                <div className=\\\"w-6 h-6 rounded-lg bg-gray-700 flex items-center justify-center text-xs font-medium text-white flex-shrink-0\\\">\\n                  Y\\n                </div>\\n              )}\\n              <div className=\\\"flex-1 min-w-0\\\">\\n                <ReactMarkdown\\n                  className=\\\"prose dark:prose-invert max-w-none prose-sm\\\"\\n                  rehypePlugins={[\\n                    rehypeRaw,\\n                    rehypeSanitize,\\n                    rehypeHighlight,\\n                    remarkGfm,\\n                  ]}\\n                >\\n                  {content}\\n                </ReactMarkdown>\\n              </div>\\n            </div>\\n          )}\\n          {parts\\n            .filter((part) => part.type === \\\"tool-invocation\\\")\\n            .filter(\\n              (part) => part.toolInvocation.toolName === \\\"recommendGuitar\\\"\\n            )\\n            .map((toolCall) => (\\n              <div\\n                key={toolCall.toolInvocation.toolName}\\n                className=\\\"max-w-[80%] mx-auto\\\"\\n              >\\n                <GuitarRecommendation id={toolCall.toolInvocation.args.id} />\\n              </div>\\n            ))}\\n        </div>\\n      ))}\\n    </div>\\n  );\\n}\\n\\nexport default function AIAssistant() {\\n  const isOpen = useStore(showAIAssistant);\\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\\n    initialMessages: [],\\n    fetch: (_url, options) => {\\n      const { messages } = JSON.parse(options!.body! as string);\\n      return genAIResponse({\\n        data: {\\n          messages,\\n        },\\n      });\\n    },\\n    onToolCall: (call) => {\\n      if (call.toolCall.toolName === \\\"recommendGuitar\\\") {\\n        return \\\"Handled by the UI\\\";\\n      }\\n    },\\n  });\\n\\n  return (\\n    <div className=\\\"relative z-50\\\">\\n      <button\\n        onClick={() => showAIAssistant.setState((state) => !state)}\\n        className=\\\"flex items-center gap-2 px-4 py-2 rounded-lg bg-black/90 text-white hover:bg-black/80 transition-all border border-orange-500/20 shadow-lg shadow-orange-500/10\\\"\\n      >\\n        <div className=\\\"w-5 h-5 rounded-lg bg-gradient-to-r from-orange-500 to-red-600 flex items-center justify-center text-xs font-medium\\\">\\n          ðŸŽ¸\\n        </div>\\n        Guitar Expert\\n      </button>\\n\\n      {isOpen && (\\n        <div className=\\\"absolute top-full right-0 mt-2 w-[700px] h-[600px] bg-black/95 rounded-lg shadow-2xl border border-orange-500/20 flex flex-col backdrop-blur-sm\\\">\\n          <div className=\\\"flex items-center justify-between p-4 border-b border-orange-500/20 bg-gradient-to-r from-orange-500/5 to-red-600/5\\\">\\n            <h3 className=\\\"font-semibold text-white flex items-center gap-2\\\">\\n              <span className=\\\"w-6 h-6 rounded-lg bg-gradient-to-r from-orange-500 to-red-600 flex items-center justify-center text-xs\\\">\\n                ðŸŽ¸\\n              </span>\\n              Guitar Expert\\n            </h3>\\n            <button\\n              onClick={() => showAIAssistant.setState((state) => !state)}\\n              className=\\\"text-gray-400 hover:text-white transition-colors\\\"\\n            >\\n              <X className=\\\"w-4 h-4\\\" />\\n            </button>\\n          </div>\\n\\n          <Messages messages={messages} />\\n\\n          <div className=\\\"p-4 border-t border-orange-500/20 bg-gradient-to-r from-orange-500/5 to-red-600/5\\\">\\n            <form onSubmit={handleSubmit}>\\n              <div className=\\\"relative\\\">\\n                <textarea\\n                  value={input}\\n                  onChange={handleInputChange}\\n                  placeholder=\\\"Ask about our featured guitars...\\\"\\n                  className=\\\"w-full rounded-lg border border-orange-500/20 bg-black/50 pl-3 pr-10 py-3 text-sm text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500/30 focus:border-transparent resize-none overflow-hidden shadow-inner\\\"\\n                  rows={1}\\n                  style={{ minHeight: \\\"44px\\\", maxHeight: \\\"120px\\\" }}\\n                  onInput={(e) => {\\n                    const target = e.target as HTMLTextAreaElement;\\n                    target.style.height = \\\"auto\\\";\\n                    target.style.height =\\n                      Math.min(target.scrollHeight, 120) + \\\"px\\\";\\n                  }}\\n                  onKeyDown={(e) => {\\n                    if (e.key === \\\"Enter\\\" && !e.shiftKey) {\\n                      e.preventDefault();\\n                      handleSubmit(e);\\n                    }\\n                  }}\\n                />\\n                <button\\n                  type=\\\"submit\\\"\\n                  disabled={!input.trim()}\\n                  className=\\\"absolute right-2 top-1/2 -translate-y-1/2 p-2 text-orange-500 hover:text-orange-400 disabled:text-gray-500 transition-colors focus:outline-none\\\"\\n                >\\n                  <Send className=\\\"w-4 h-4\\\" />\\n                </button>\\n              </div>\\n            </form>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\",\n    \"./src/routeTree.gen.ts\": \"/* eslint-disable */\\n\\n// @ts-nocheck\\n\\n// noinspection JSUnusedGlobalSymbols\\n\\n// This file was automatically generated by TanStack Router.\\n// You should NOT make any changes in this file as it will be overwritten.\\n// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.\\n\\n// Import Routes\\n\\nimport { Route as rootRoute } from './routes/__root'\\nimport { Route as ChatImport } from './routes/chat'\\nimport { Route as IndexImport } from './routes/index'\\nimport { Route as GuitarsGuitarIdImport } from './routes/guitars/$guitarId'\\n\\n// Create/Update Routes\\n\\nconst ChatRoute = ChatImport.update({\\n  id: '/chat',\\n  path: '/chat',\\n  getParentRoute: () => rootRoute,\\n} as any)\\n\\nconst IndexRoute = IndexImport.update({\\n  id: '/',\\n  path: '/',\\n  getParentRoute: () => rootRoute,\\n} as any)\\n\\nconst GuitarsGuitarIdRoute = GuitarsGuitarIdImport.update({\\n  id: '/guitars/$guitarId',\\n  path: '/guitars/$guitarId',\\n  getParentRoute: () => rootRoute,\\n} as any)\\n\\n// Populate the FileRoutesByPath interface\\n\\ndeclare module '@tanstack/react-router' {\\n  interface FileRoutesByPath {\\n    '/': {\\n      id: '/'\\n      path: '/'\\n      fullPath: '/'\\n      preLoaderRoute: typeof IndexImport\\n      parentRoute: typeof rootRoute\\n    }\\n    '/chat': {\\n      id: '/chat'\\n      path: '/chat'\\n      fullPath: '/chat'\\n      preLoaderRoute: typeof ChatImport\\n      parentRoute: typeof rootRoute\\n    }\\n    '/guitars/$guitarId': {\\n      id: '/guitars/$guitarId'\\n      path: '/guitars/$guitarId'\\n      fullPath: '/guitars/$guitarId'\\n      preLoaderRoute: typeof GuitarsGuitarIdImport\\n      parentRoute: typeof rootRoute\\n    }\\n  }\\n}\\n\\n// Create and export the route tree\\n\\nexport interface FileRoutesByFullPath {\\n  '/': typeof IndexRoute\\n  '/chat': typeof ChatRoute\\n  '/guitars/$guitarId': typeof GuitarsGuitarIdRoute\\n}\\n\\nexport interface FileRoutesByTo {\\n  '/': typeof IndexRoute\\n  '/chat': typeof ChatRoute\\n  '/guitars/$guitarId': typeof GuitarsGuitarIdRoute\\n}\\n\\nexport interface FileRoutesById {\\n  __root__: typeof rootRoute\\n  '/': typeof IndexRoute\\n  '/chat': typeof ChatRoute\\n  '/guitars/$guitarId': typeof GuitarsGuitarIdRoute\\n}\\n\\nexport interface FileRouteTypes {\\n  fileRoutesByFullPath: FileRoutesByFullPath\\n  fullPaths: '/' | '/chat' | '/guitars/$guitarId'\\n  fileRoutesByTo: FileRoutesByTo\\n  to: '/' | '/chat' | '/guitars/$guitarId'\\n  id: '__root__' | '/' | '/chat' | '/guitars/$guitarId'\\n  fileRoutesById: FileRoutesById\\n}\\n\\nexport interface RootRouteChildren {\\n  IndexRoute: typeof IndexRoute\\n  ChatRoute: typeof ChatRoute\\n  GuitarsGuitarIdRoute: typeof GuitarsGuitarIdRoute\\n}\\n\\nconst rootRouteChildren: RootRouteChildren = {\\n  IndexRoute: IndexRoute,\\n  ChatRoute: ChatRoute,\\n  GuitarsGuitarIdRoute: GuitarsGuitarIdRoute,\\n}\\n\\nexport const routeTree = rootRoute\\n  ._addFileChildren(rootRouteChildren)\\n  ._addFileTypes<FileRouteTypes>()\\n\\n/* ROUTE_MANIFEST_START\\n{\\n  \\\"routes\\\": {\\n    \\\"__root__\\\": {\\n      \\\"filePath\\\": \\\"__root.tsx\\\",\\n      \\\"children\\\": [\\n        \\\"/\\\",\\n        \\\"/chat\\\",\\n        \\\"/guitars/$guitarId\\\"\\n      ]\\n    },\\n    \\\"/\\\": {\\n      \\\"filePath\\\": \\\"index.tsx\\\"\\n    },\\n    \\\"/chat\\\": {\\n      \\\"filePath\\\": \\\"chat.tsx\\\"\\n    },\\n    \\\"/guitars/$guitarId\\\": {\\n      \\\"filePath\\\": \\\"guitars/$guitarId.tsx\\\"\\n    }\\n  }\\n}\\nROUTE_MANIFEST_END */\\n\",\n    \"./src/routes/__root.tsx\": \"import {\\n  Outlet,\\n  HeadContent,\\n  Scripts,\\n  createRootRoute,\\n} from \\\"@tanstack/react-router\\\";\\nimport { TanStackRouterDevtools } from \\\"@tanstack/react-router-devtools\\\";\\n\\nimport Header from \\\"../components/Header\\\";\\n\\nimport appCss from \\\"../styles.css?url\\\";\\n\\nexport const Route = createRootRoute({\\n  head: () => ({\\n    meta: [\\n      {\\n        charSet: \\\"utf-8\\\",\\n      },\\n      {\\n        name: \\\"viewport\\\",\\n        content: \\\"width=device-width, initial-scale=1\\\",\\n      },\\n      {\\n        title: \\\"TanStack Start Starter\\\",\\n      },\\n    ],\\n    links: [\\n      {\\n        rel: \\\"stylesheet\\\",\\n        href: appCss,\\n      },\\n    ],\\n  }),\\n\\n  component: () => (\\n    <RootDocument>\\n      <Header />\\n\\n      <Outlet />\\n      <TanStackRouterDevtools />\\n    </RootDocument>\\n  ),\\n});\\n\\nfunction RootDocument({ children }: { children: React.ReactNode }) {\\n  return (\\n    <html lang=\\\"en\\\">\\n      <head>\\n        <HeadContent />\\n      </head>\\n      <body className=\\\"bg-black\\\">\\n        {children}\\n        <Scripts />\\n      </body>\\n    </html>\\n  );\\n}\\n\",\n    \"./src/routes/chat.tsx\": \"import { createFileRoute } from \\\"@tanstack/react-router\\\";\\nimport { useEffect, useRef } from \\\"react\\\";\\nimport { Send } from \\\"lucide-react\\\";\\nimport ReactMarkdown from \\\"react-markdown\\\";\\nimport rehypeRaw from \\\"rehype-raw\\\";\\nimport rehypeSanitize from \\\"rehype-sanitize\\\";\\nimport rehypeHighlight from \\\"rehype-highlight\\\";\\nimport remarkGfm from \\\"remark-gfm\\\";\\nimport { useChat } from \\\"@ai-sdk/react\\\";\\n\\nimport { genAIResponse } from \\\"../utils/demo.ai\\\";\\n\\nimport type { UIMessage } from \\\"ai\\\";\\n\\nimport \\\"../demo.index.css\\\";\\n\\nfunction InitalLayout({ children }: { children: React.ReactNode }) {\\n  return (\\n    <div className=\\\"flex-1 flex items-center justify-center px-4 bg-black/90\\\">\\n      <div className=\\\"text-center max-w-3xl mx-auto w-full\\\">\\n        <h1 className=\\\"text-6xl font-bold mb-4 bg-gradient-to-r from-orange-500 to-red-600 text-transparent bg-clip-text uppercase\\\">\\n          Guitar Expert Chat\\n        </h1>\\n        <p className=\\\"text-gray-400 mb-8 w-2/3 mx-auto text-lg\\\">\\n          Get personalized advice about our featured guitars and find your\\n          perfect match\\n        </p>\\n        {children}\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction ChattingLayout({ children }: { children: React.ReactNode }) {\\n  return (\\n    <div className=\\\"absolute bottom-0 right-0 left-0 bg-black/95 backdrop-blur-lg border-t border-orange-500/20\\\">\\n      <div className=\\\"max-w-3xl mx-auto w-full px-4 py-4\\\">{children}</div>\\n    </div>\\n  );\\n}\\n\\nfunction Messages({ messages }: { messages: Array<UIMessage> }) {\\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\\n\\n  useEffect(() => {\\n    if (messagesContainerRef.current) {\\n      messagesContainerRef.current.scrollTop =\\n        messagesContainerRef.current.scrollHeight;\\n    }\\n  }, [messages]);\\n\\n  if (!messages.length) {\\n    return null;\\n  }\\n\\n  return (\\n    <div ref={messagesContainerRef} className=\\\"flex-1 overflow-y-auto pb-24\\\">\\n      <div className=\\\"max-w-3xl mx-auto w-full px-4\\\">\\n        {messages.map(({ id, role, content }) => (\\n          <div\\n            key={id}\\n            className={`py-6 px-4 rounded-lg mb-4 ${\\n              role === \\\"assistant\\\"\\n                ? \\\"bg-gradient-to-r from-gray-900 to-gray-800 border border-orange-500/10\\\"\\n                : \\\"bg-gray-900/50\\\"\\n            }`}\\n          >\\n            <div className=\\\"flex items-start gap-4 max-w-3xl mx-auto w-full\\\">\\n              {role === \\\"assistant\\\" ? (\\n                <div className=\\\"w-10 h-10 rounded-lg bg-gradient-to-r from-orange-500 to-red-600 mt-1 flex items-center justify-center text-sm font-medium text-white flex-shrink-0 shadow-lg\\\">\\n                  ðŸŽ¸\\n                </div>\\n              ) : (\\n                <div className=\\\"w-10 h-10 rounded-lg bg-gray-800 border border-orange-500/20 flex items-center justify-center text-sm font-medium text-white flex-shrink-0\\\">\\n                  You\\n                </div>\\n              )}\\n              <div className=\\\"flex-1 min-w-0\\\">\\n                <ReactMarkdown\\n                  className=\\\"prose dark:prose-invert max-w-none\\\"\\n                  rehypePlugins={[\\n                    rehypeRaw,\\n                    rehypeSanitize,\\n                    rehypeHighlight,\\n                    remarkGfm,\\n                  ]}\\n                >\\n                  {content}\\n                </ReactMarkdown>\\n              </div>\\n            </div>\\n          </div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction ChatPage() {\\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\\n    initialMessages: [],\\n    fetch: (_url, options) => {\\n      const { messages } = JSON.parse(options!.body! as string);\\n      return genAIResponse({\\n        data: {\\n          messages,\\n        },\\n      });\\n    },\\n  });\\n\\n  const Layout = messages.length ? ChattingLayout : InitalLayout;\\n\\n  return (\\n    <div className=\\\"relative flex h-[calc(100vh-32px)] bg-black\\\">\\n      <div className=\\\"flex-1 flex flex-col\\\">\\n        <Messages messages={messages} />\\n\\n        <Layout>\\n          <form onSubmit={handleSubmit}>\\n            <div className=\\\"relative max-w-xl mx-auto\\\">\\n              <textarea\\n                value={input}\\n                onChange={handleInputChange}\\n                placeholder=\\\"Ask about our featured guitars...\\\"\\n                className=\\\"w-full rounded-lg border border-orange-500/20 bg-gray-900/90 pl-4 pr-12 py-3 text-sm text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500/30 focus:border-transparent resize-none overflow-hidden shadow-xl\\\"\\n                rows={1}\\n                style={{ minHeight: \\\"44px\\\", maxHeight: \\\"200px\\\" }}\\n                onInput={(e) => {\\n                  const target = e.target as HTMLTextAreaElement;\\n                  target.style.height = \\\"auto\\\";\\n                  target.style.height =\\n                    Math.min(target.scrollHeight, 200) + \\\"px\\\";\\n                }}\\n                onKeyDown={(e) => {\\n                  if (e.key === \\\"Enter\\\" && !e.shiftKey) {\\n                    e.preventDefault();\\n                    handleSubmit(e);\\n                  }\\n                }}\\n              />\\n              <button\\n                type=\\\"submit\\\"\\n                disabled={!input.trim()}\\n                className=\\\"absolute right-2 top-1/2 -translate-y-1/2 p-2 text-orange-500 hover:text-orange-400 disabled:text-gray-500 transition-colors focus:outline-none\\\"\\n              >\\n                <Send className=\\\"w-4 h-4\\\" />\\n              </button>\\n            </div>\\n          </form>\\n        </Layout>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport const Route = createFileRoute(\\\"/chat\\\")({\\n  component: ChatPage,\\n});\\n\",\n    \"./src/routes/guitars/$guitarId.tsx\": \"import { Link, createFileRoute } from \\\"@tanstack/react-router\\\";\\nimport guitars from \\\"../../data/example-guitars\\\";\\n\\nexport const Route = createFileRoute(\\\"/guitars/$guitarId\\\")({\\n  component: RouteComponent,\\n  loader: async ({ params }) => {\\n    const guitar = guitars.find((guitar) => guitar.id === +params.guitarId);\\n    if (!guitar) {\\n      throw new Error(\\\"Guitar not found\\\");\\n    }\\n    return guitar;\\n  },\\n});\\n\\nfunction RouteComponent() {\\n  const guitar = Route.useLoaderData();\\n\\n  return (\\n    <div className=\\\"relative min-h-[100vh] flex items-center bg-black text-white p-5\\\">\\n      <div className=\\\"relative z-10 w-[60%] bg-gray-900/60 backdrop-blur-md rounded-2xl p-8 border border-gray-800/50 shadow-xl\\\">\\n        <Link\\n          to=\\\"/\\\"\\n          className=\\\"inline-block mb-4 text-emerald-400 hover:text-emerald-300\\\"\\n        >\\n          &larr; Back to all guitars\\n        </Link>\\n        <h1 className=\\\"text-3xl font-bold mb-4\\\">{guitar.name}</h1>\\n        <p className=\\\"text-gray-300 mb-6\\\">{guitar.description}</p>\\n        <div className=\\\"flex items-center justify-between\\\">\\n          <div className=\\\"text-2xl font-bold text-emerald-400\\\">\\n            ${guitar.price}\\n          </div>\\n          <button className=\\\"bg-emerald-600 hover:bg-emerald-500 text-white px-6 py-2 rounded-lg transition-colors\\\">\\n            Add to Cart\\n          </button>\\n        </div>\\n      </div>\\n\\n      <div className=\\\"absolute top-0 right-0 w-[55%] h-full z-0\\\">\\n        <div className=\\\"w-full h-full overflow-hidden rounded-2xl border-4 border-gray-800 shadow-2xl\\\">\\n          <img\\n            src={guitar.image}\\n            alt={guitar.name}\\n            className=\\\"w-full h-full object-cover guitar-image\\\"\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\",\n    \"./src/routes/index.tsx\": \"import { Link, createFileRoute } from \\\"@tanstack/react-router\\\";\\nimport guitars from \\\"@/data/example-guitars\\\";\\n\\nexport const Route = createFileRoute(\\\"/\\\")({\\n  component: GuitarsIndex,\\n});\\n\\nfunction GuitarsIndex() {\\n  return (\\n    <div className=\\\"bg-black text-white p-5\\\">\\n      <h1 className=\\\"text-3xl font-bold mb-8 text-center\\\">Featured Guitars</h1>\\n      <div className=\\\"flex flex-wrap gap-12 justify-center\\\">\\n        {guitars.map((guitar) => (\\n          <div\\n            key={guitar.id}\\n            className=\\\"w-full md:w-[calc(50%-1.5rem)] xl:w-[calc(33.333%-2rem)] relative mb-24\\\"\\n          >\\n            <Link\\n              to=\\\"/guitars/$guitarId\\\"\\n              params={{\\n                guitarId: guitar.id.toString(),\\n              }}\\n            >\\n              <div className=\\\"relative z-0 w-full aspect-square mb-8\\\">\\n                <div className=\\\"w-full h-full overflow-hidden rounded-2xl border-4 border-gray-800 shadow-2xl\\\">\\n                  <img\\n                    src={guitar.image}\\n                    alt={guitar.name}\\n                    className=\\\"w-full h-full object-cover guitar-image group-hover:scale-105 transition-transform duration-500\\\"\\n                  />\\n                  <div className=\\\"absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\\\"></div>\\n                </div>\\n\\n                <div className=\\\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-emerald-500/80 text-white px-4 py-2 rounded-full text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300 backdrop-blur-sm\\\">\\n                  View Details\\n                </div>\\n              </div>\\n\\n              <div className=\\\"absolute bottom-0 right-0 z-10 w-[80%] bg-gray-900/60 backdrop-blur-md rounded-2xl p-5 border border-gray-800/50 shadow-xl transform translate-y-[40%]\\\">\\n                <h2 className=\\\"text-xl font-bold mb-2\\\">{guitar.name}</h2>\\n                <p className=\\\"text-gray-300 mb-3 line-clamp-2\\\">\\n                  {guitar.shortDescription}\\n                </p>\\n                <div className=\\\"text-xl font-bold text-emerald-400\\\">\\n                  ${guitar.price}\\n                </div>\\n              </div>\\n            </Link>\\n          </div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n}\\n\",\n    \"./src/utils/demo.tools.ts\": \"import { tool } from \\\"ai\\\";\\nimport { z } from \\\"zod\\\";\\nimport guitars from \\\"../data/example-guitars\\\";\\n\\nconst getGuitars = tool({\\n  description: \\\"Get all products from the database\\\",\\n  parameters: z.object({}),\\n  execute: async () => {\\n    return Promise.resolve(guitars);\\n  },\\n});\\n\\nconst recommendGuitar = tool({\\n  description: \\\"Use this tool to recommend a guitar to the user\\\",\\n  parameters: z.object({\\n    id: z.string().describe(\\\"The id of the guitar to recommend\\\"),\\n  }),\\n});\\n\\nexport default async function getTools() {\\n  return {\\n    getGuitars,\\n    recommendGuitar,\\n  };\\n}\\n\"\n  },\n  \"addDependencies\": [\n    \"tanchat\",\n    \"start\",\n    \"store\"\n  ],\n  \"mode\": \"file-router\",\n  \"typescript\": true,\n  \"tailwind\": true,\n  \"deletedFiles\": [\n    \"./src/routes/api.demo-names.ts\",\n    \"./src/routes/demo.start.api-request.tsx\",\n    \"./src/routes/demo.start.server-funcs.tsx\",\n    \"./src/routes/demo.store.tsx\",\n    \"./src/routes/example.chat.tsx\",\n    \"./src/routes/example.guitars/$guitarId.tsx\",\n    \"./src/routes/example.guitars/index.tsx\",\n    \"./src/lib/demo-store.ts\"\n  ]\n}"
  },
  "addDependencies": [
    "tanchat",
    "start",
    "store"
  ],
  "mode": "file-router",
  "typescript": true,
  "tailwind": true,
  "deletedFiles": [
    "./src/routes/api.demo-names.ts",
    "./src/routes/demo.start.api-request.tsx",
    "./src/routes/demo.start.server-funcs.tsx",
    "./src/routes/demo.store.tsx",
    "./src/routes/example.chat.tsx",
    "./src/routes/example.guitars/$guitarId.tsx",
    "./src/routes/example.guitars/index.tsx",
    "./src/lib/demo-store.ts"
  ]
}